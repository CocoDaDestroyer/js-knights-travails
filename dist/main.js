(()=>{"use strict";var e={28:(e,t,r)=>{r.d(t,{Z:()=>s});var n=r(537),o=r.n(n),a=r(645),c=r.n(a)()(o());c.push([e.id,"td{\r\n    height:8vh;\r\n    width: 8vh;\r\n    border:1.5px solid gray;\r\n    border-style: inset;\r\n}\r\nh1{\r\n    color:black;\r\n    text-align: center;\r\n}\r\n.whiteCell{\r\n    background-color: white;\r\n}\r\n.blackCell{\r\n    background-color: black;\r\n    color:white;\r\n}\r\nimg{\r\n    height:5vh;\r\n    width: 4vh;\r\n}\r\ntable{\r\n    text-align: center;\r\n    font-size: x-large;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n}\r\nbutton{\r\n    margin: 15px;\r\n}\r\nbody{\r\n    text-align: center;\r\n    background-color: brown;\r\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,UAAU;IACV,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,WAAW;IACX,kBAAkB;AACtB;AACA;IACI,uBAAuB;AAC3B;AACA;IACI,uBAAuB;IACvB,WAAW;AACf;AACA;IACI,UAAU;IACV,UAAU;AACd;AACA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;AACtB;AACA;IACI,YAAY;AAChB;AACA;IACI,kBAAkB;IAClB,uBAAuB;AAC3B",sourcesContent:["td{\r\n    height:8vh;\r\n    width: 8vh;\r\n    border:1.5px solid gray;\r\n    border-style: inset;\r\n}\r\nh1{\r\n    color:black;\r\n    text-align: center;\r\n}\r\n.whiteCell{\r\n    background-color: white;\r\n}\r\n.blackCell{\r\n    background-color: black;\r\n    color:white;\r\n}\r\nimg{\r\n    height:5vh;\r\n    width: 4vh;\r\n}\r\ntable{\r\n    text-align: center;\r\n    font-size: x-large;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n}\r\nbutton{\r\n    margin: 15px;\r\n}\r\nbody{\r\n    text-align: center;\r\n    background-color: brown;\r\n}"],sourceRoot:""}]);const s=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(n)for(var s=0;s<this.length;s++){var i=this[s][0];null!=i&&(c[i]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);n&&c[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var a={},c=[],s=0;s<e.length;s++){var i=e[s],l=n.base?i[0]+n.base:i[0],u=a[l]||0,d="".concat(l," ").concat(u);a[l]=u+1;var p=r(d),A={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var h=o(A,n);n.byIndex=s,t.splice(s,0,{identifier:d,updater:h,references:1})}c.push(d)}return c}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var a=n(e=e||[],o=o||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var s=r(a[c]);t[s].references--}for(var i=n(e,o),l=0;l<a.length;l++){var u=r(a[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=i}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={id:n,exports:{}};return e[n](a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{var e=r(379),t=r.n(e),n=r(795),o=r.n(n),a=r(569),c=r.n(a),s=r(565),i=r.n(s),l=r(216),u=r.n(l),d=r(589),p=r.n(d),A=r(28),h={};h.styleTagTransform=p(),h.setAttributes=i(),h.insert=c().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=u(),t()(A.Z,h),A.Z&&A.Z.locals&&A.Z.locals;const f=new Map,v=(e,t)=>{const r=e,n=t;let o;const a=[[1,2],[1,-2],[2,1],[2,-1],[-1,2],[-1,-2],[-2,1],[-2,-1]],c=()=>o,s=e=>{o=o||e},i=()=>`${e}, ${t}`,l=()=>a.map((e=>u(e[0],e[1]))).filter((e=>void 0!==e)),u=(e,o)=>{const[a,c]=[r+e,n+o];if(0<=a&&a<8&&0<=c&&t<8)return v(a,c)};if(f.has(i()))return f.get(i());{const e={name:i,getPredecessor:c,setPredecessor:s,possibleKnightMoves:l};return f.set(i(),e),e}},g=(e,t)=>{f.clear();const r=v(e[0],e[1]),n=v(t[0],t[1]),o=[r];for(;!o.includes(n);){const e=o.shift(),t=e.possibleKnightMoves();t.forEach((t=>t.setPredecessor(e))),o.push(...t)}const a=[n];for(;!a.includes(r);){const e=a[0].getPredecessor();a.unshift(e)}console.log(`The shortest path was ${a.length-1} moves!`),console.log("The moves were:");let c=[];a.forEach((e=>{c.push(e.name())})),console.log(c)};(()=>{const e=[1,0],t=[],r=document.createElement("table");r.setAttribute("class","center");for(let e=0;e<8;e++){const n=document.createElement("tr");let o=Math.abs(e-7);n.textContent=o;for(let r=0;r<8;r++){let a=document.createElement("td"),c=r;a.textContent=c,(e+r)%2==0&&(a.setAttribute("class","whiteCell"),n.appendChild(a),t.push(o),t.push(c),a.dataset.coordArray=t,t.splice(0,2)),(e+r)%2==1&&(a.setAttribute("class","blackCell"),n.appendChild(a),t.push(o),t.push(c),a.dataset.coordArray=t,t.splice(0,2))}r.appendChild(n)}r.querySelectorAll("td").forEach((t=>{if(e.toString()===t.dataset.coordArray){let e=document.createElement("img");e.src="https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fclipart-library.com%2Fimg%2F962467.png&f=1&nofb=1&ipt=87a41a83ee60776c9c738658fcf5061b375372582e611fe4e527eb8938b4ac2d&ipo=images",t.appendChild(e)}})),document.body.appendChild(r)})(),(()=>{const e=[],t=document.querySelector("Table").querySelectorAll("td");for(t.forEach((t=>{t.addEventListener("click",(function(t){e.push(t.dataset.coordArray)}))}));e.length>1;)t.removeEventListener("click",(function(e){getCoords(e)})),g(e[0],e[1]),e.length=0})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cyIsIndlYnBhY2s6Ly9qcy1rbmlnaHRzLXRyYXZhaWxzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9qcy1rbmlnaHRzLXRyYXZhaWxzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vanMta25pZ2h0cy10cmF2YWlscy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9qcy1rbmlnaHRzLXRyYXZhaWxzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9qcy1rbmlnaHRzLXRyYXZhaWxzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2pzLWtuaWdodHMtdHJhdmFpbHMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vanMta25pZ2h0cy10cmF2YWlscy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2pzLWtuaWdodHMtdHJhdmFpbHMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9qcy1rbmlnaHRzLXRyYXZhaWxzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2pzLWtuaWdodHMtdHJhdmFpbHMvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vanMta25pZ2h0cy10cmF2YWlscy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vanMta25pZ2h0cy10cmF2YWlscy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2pzLWtuaWdodHMtdHJhdmFpbHMvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL2pzLWtuaWdodHMtdHJhdmFpbHMvLi9zcmMvc3R5bGVzLmNzcz80NGIyIiwid2VicGFjazovL2pzLWtuaWdodHMtdHJhdmFpbHMvLi9zcmMva25pZ2h0TW92ZXMuanMiLCJ3ZWJwYWNrOi8vanMta25pZ2h0cy10cmF2YWlscy8uL3NyYy9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vanMta25pZ2h0cy10cmF2YWlscy8uL3NyYy9hcHAuanMiLCJ3ZWJwYWNrOi8vanMta25pZ2h0cy10cmF2YWlscy8uL3NyYy9nZXRQYXRoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwidGR7XFxyXFxuICAgIGhlaWdodDo4dmg7XFxyXFxuICAgIHdpZHRoOiA4dmg7XFxyXFxuICAgIGJvcmRlcjoxLjVweCBzb2xpZCBncmF5O1xcclxcbiAgICBib3JkZXItc3R5bGU6IGluc2V0O1xcclxcbn1cXHJcXG5oMXtcXHJcXG4gICAgY29sb3I6YmxhY2s7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG59XFxyXFxuLndoaXRlQ2VsbHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxufVxcclxcbi5ibGFja0NlbGx7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xcclxcbiAgICBjb2xvcjp3aGl0ZTtcXHJcXG59XFxyXFxuaW1ne1xcclxcbiAgICBoZWlnaHQ6NXZoO1xcclxcbiAgICB3aWR0aDogNHZoO1xcclxcbn1cXHJcXG50YWJsZXtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBmb250LXNpemU6IHgtbGFyZ2U7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxyXFxufVxcclxcbmJ1dHRvbntcXHJcXG4gICAgbWFyZ2luOiAxNXB4O1xcclxcbn1cXHJcXG5ib2R5e1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJyb3duO1xcclxcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFVBQVU7SUFDVixVQUFVO0lBQ1YsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtBQUN2QjtBQUNBO0lBQ0ksV0FBVztJQUNYLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksdUJBQXVCO0FBQzNCO0FBQ0E7SUFDSSx1QkFBdUI7SUFDdkIsV0FBVztBQUNmO0FBQ0E7SUFDSSxVQUFVO0lBQ1YsVUFBVTtBQUNkO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLFlBQVk7QUFDaEI7QUFDQTtJQUNJLGtCQUFrQjtJQUNsQix1QkFBdUI7QUFDM0JcIixcInNvdXJjZXNDb250ZW50XCI6W1widGR7XFxyXFxuICAgIGhlaWdodDo4dmg7XFxyXFxuICAgIHdpZHRoOiA4dmg7XFxyXFxuICAgIGJvcmRlcjoxLjVweCBzb2xpZCBncmF5O1xcclxcbiAgICBib3JkZXItc3R5bGU6IGluc2V0O1xcclxcbn1cXHJcXG5oMXtcXHJcXG4gICAgY29sb3I6YmxhY2s7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG59XFxyXFxuLndoaXRlQ2VsbHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxufVxcclxcbi5ibGFja0NlbGx7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xcclxcbiAgICBjb2xvcjp3aGl0ZTtcXHJcXG59XFxyXFxuaW1ne1xcclxcbiAgICBoZWlnaHQ6NXZoO1xcclxcbiAgICB3aWR0aDogNHZoO1xcclxcbn1cXHJcXG50YWJsZXtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBmb250LXNpemU6IHgtbGFyZ2U7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxyXFxufVxcclxcbmJ1dHRvbntcXHJcXG4gICAgbWFyZ2luOiAxNXB4O1xcclxcbn1cXHJcXG5ib2R5e1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJyb3duO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxyXG5jb25zdCBzcXVhcmVSZWdpc3RyeSA9IG5ldyBNYXAoKTtcclxuXHJcbi8vIEdldC9zZXQgY3VycmVudCBjb29yZHMgdG8gdGhlIGJvYXJkXHJcbmNvbnN0IGNoZXNzU3F1YXJlID0gKHgsIHkpID0+IHtcclxuICAgIGNvbnN0IHhQb3NpdGlvbiA9IHg7XHJcbiAgICBjb25zdCB5UG9zaXRpb24gPSB5O1xyXG4gICAgbGV0IHByZWRlY2Vzc29yO1xyXG5cclxuICAgIC8vIERlZmluZSBhcnJheSBmb3IgaGFyZGNvZGVkIHBvc3NpYmxlIG1vdmVzIG9mIEtuaWdodFxyXG4gICAgY29uc3QgS05JR0hUX01PVkVTID0gW1xyXG4gICAgICAgIFsxLCAyXSwgWzEsIC0yXSxcclxuICAgICAgICBbMiwgMV0sIFsyLCAtMV0sXHJcbiAgICAgICAgWy0xLCAyXSwgWy0xLCAtMl0sXHJcbiAgICAgICAgWy0yLCAxXSwgWy0yLCAtMV1cclxuICAgIF1cclxuXHJcbiAgICBjb25zdCBnZXRQcmVkZWNlc3NvciA9ICgpID0+IHByZWRlY2Vzc29yO1xyXG4gICAgY29uc3Qgc2V0UHJlZGVjZXNzb3IgPSAobmV3UHJlZGVjZXNzb3IpID0+IHtcclxuICAgICAgICBwcmVkZWNlc3NvciA9IHByZWRlY2Vzc29yIHx8IG5ld1ByZWRlY2Vzc29yO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG5hbWUgPSAoKSA9PiBgJHt4fSwgJHt5fWA7XHJcblxyXG4gICAgLy8gRXZhbHVhdGUgY3VycmVudCBwb3NzaWJsZSBrbmlnaHQgbW92ZXMgYWdhaW5zdCBvZmZzZXRzXHJcbiAgICBjb25zdCBwb3NzaWJsZUtuaWdodE1vdmVzID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBLTklHSFRfTU9WRVNcclxuICAgICAgICAgICAgLm1hcCgob2Zmc2V0KSA9PiBuZXdTcXVhcmVGcm9tKG9mZnNldFswXSwgb2Zmc2V0WzFdKSlcclxuICAgICAgICAgICAgLmZpbHRlcigoc3F1YXJlKSA9PiBzcXVhcmUgIT09IHVuZGVmaW5lZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsY3VsdXRlIG5ldyBzZXQgb2Ygc3F1YXJlIGNvb3JkcyBhZ2FpbnN0IHRoZSBvZmZzZXRzXHJcbiAgICBjb25zdCBuZXdTcXVhcmVGcm9tID0gKHhPZmZzZXQsIHlPZmZzZXQpID0+IHtcclxuICAgICAgICBjb25zdCBbbmV3WCwgbmV3WV0gPSBbeFBvc2l0aW9uICsgeE9mZnNldCwgeVBvc2l0aW9uICsgeU9mZnNldF07XHJcbiAgICAgICAgaWYgKDAgPD0gbmV3WCAmJiBuZXdYIDwgOCAmJiAwIDw9IG5ld1kgJiYgeSA8IDgpIHtcclxuICAgICAgICAgIHJldHVybiBjaGVzc1NxdWFyZShuZXdYLCBuZXdZKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0L3NldCBtYXAgY29uc3RydWN0b3Igb2JqZWN0IG5hbWUocylcclxuICAgIGlmIChzcXVhcmVSZWdpc3RyeS5oYXMobmFtZSgpKSkge1xyXG4gICAgICAgIHJldHVybiBzcXVhcmVSZWdpc3RyeS5nZXQobmFtZSgpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgbmV3U3F1YXJlID0geyBuYW1lLCBnZXRQcmVkZWNlc3Nvciwgc2V0UHJlZGVjZXNzb3IsIHBvc3NpYmxlS25pZ2h0TW92ZXMgfVxyXG4gICAgICAgIHNxdWFyZVJlZ2lzdHJ5LnNldChuYW1lKCksIG5ld1NxdWFyZSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld1NxdWFyZTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gSW50YWtlIHRoZSBjbGljayBjb29yZHMgZnJvbSB1c2VyIGFuZCBydW4gdGhlIHNlYXJjaCBhbGdvXHJcbmNvbnN0IGtuaWdodHNUcmF2YWlscyA9IChzdGFydCwgZmluaXNoKSA9PiB7XHJcbiAgICBzcXVhcmVSZWdpc3RyeS5jbGVhcigpO1xyXG4gIFxyXG4gICAgY29uc3Qgb3JpZ2luID0gY2hlc3NTcXVhcmUoc3RhcnRbMF0sc3RhcnRbMV0pO1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gY2hlc3NTcXVhcmUoZmluaXNoWzBdLGZpbmlzaFsxXSk7XHJcbiAgXHJcbiAgICBjb25zdCBxdWV1ZSA9IFtvcmlnaW5dO1xyXG4gICAgd2hpbGUgKCFxdWV1ZS5pbmNsdWRlcyh0YXJnZXQpKSB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRTcXVhcmUgPSBxdWV1ZS5zaGlmdCgpO1xyXG4gIFxyXG4gICAgICBjb25zdCBlbnF1ZXVlTGlzdCA9IGN1cnJlbnRTcXVhcmUucG9zc2libGVLbmlnaHRNb3ZlcygpO1xyXG4gICAgICBlbnF1ZXVlTGlzdC5mb3JFYWNoKChzcXVhcmUpID0+IHNxdWFyZS5zZXRQcmVkZWNlc3NvcihjdXJyZW50U3F1YXJlKSk7XHJcbiAgICAgIHF1ZXVlLnB1c2goLi4uZW5xdWV1ZUxpc3QpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGF0aCA9IFt0YXJnZXRdXHJcbiAgICB3aGlsZSAoIXBhdGguaW5jbHVkZXMob3JpZ2luKSkge1xyXG4gICAgICBjb25zdCBwcmV2U3F1YXJlID0gcGF0aFswXS5nZXRQcmVkZWNlc3NvcigpO1xyXG4gICAgICBwYXRoLnVuc2hpZnQocHJldlNxdWFyZSk7XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyhgVGhlIHNob3J0ZXN0IHBhdGggd2FzICR7cGF0aC5sZW5ndGggLSAxfSBtb3ZlcyFgKTtcclxuICAgIGNvbnNvbGUubG9nKFwiVGhlIG1vdmVzIHdlcmU6XCIpO1xyXG4gICAgbGV0IHNxdWFyZUNvb3JkID0gW107XHJcbiAgICBwYXRoLmZvckVhY2goKHNxdWFyZSkgPT4ge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHNxdWFyZS5uYW1lKCkpO1xyXG4gICAgICAgIHNxdWFyZUNvb3JkLnB1c2goc3F1YXJlLm5hbWUoKSk7XHJcbiAgICB9KTtcclxuICAgIGNvbnNvbGUubG9nKHNxdWFyZUNvb3JkKTtcclxuICAgIFxyXG59O1xyXG5cclxuZXhwb3J0IHsga25pZ2h0c1RyYXZhaWxzIH07IiwiY29uc3QgZ2FtZUJvYXJkID0gKCkgPT57XHJcbiAgICBjb25zdCBzdGFydENvb3JkcyA9IFsxLDBdO1xyXG4gICAgY29uc3Qgbm9kZUNvb3JkID0gW107XHJcbiAgICBjb25zdCBjaGVzc1RhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcclxuICAgIGNoZXNzVGFibGUuc2V0QXR0cmlidXRlKCdjbGFzcycsJ2NlbnRlcicpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7aTw4O2krKyl7XHJcbiAgICAgICAgY29uc3QgdGFibGVSb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xyXG4gICAgICAgIGxldCByb3dDb29yZCA9IE1hdGguYWJzKGktNyk7XHJcbiAgICAgICAgdGFibGVSb3cudGV4dENvbnRlbnQgPSByb3dDb29yZDtcclxuICAgICAgICBmb3IobGV0IHogPTA7ejw4O3orKyl7XHJcbiAgICAgICAgICAgIGxldCB0YWJsZUNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xyXG4gICAgICAgICAgICBsZXQgY29sdW1uQ29vcmQgPSB6O1xyXG4gICAgICAgICAgICB0YWJsZUNlbGwudGV4dENvbnRlbnQgPSBjb2x1bW5Db29yZDtcclxuICAgICAgICAgICAgaWYoKGkreiklMiA9PSAwKXtcclxuICAgICAgICAgICAgICAgIHRhYmxlQ2VsbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywnd2hpdGVDZWxsJyk7XHJcbiAgICAgICAgICAgICAgICB0YWJsZVJvdy5hcHBlbmRDaGlsZCh0YWJsZUNlbGwpO1xyXG4gICAgICAgICAgICAgICAgbm9kZUNvb3JkLnB1c2gocm93Q29vcmQpO1xyXG4gICAgICAgICAgICAgICAgbm9kZUNvb3JkLnB1c2goY29sdW1uQ29vcmQpO1xyXG4gICAgICAgICAgICAgICAgdGFibGVDZWxsLmRhdGFzZXQuY29vcmRBcnJheSA9IG5vZGVDb29yZDtcclxuICAgICAgICAgICAgICAgIG5vZGVDb29yZC5zcGxpY2UoMCwyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZigoaSt6KSUyID09IDEpe1xyXG4gICAgICAgICAgICAgICAgdGFibGVDZWxsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCdibGFja0NlbGwnKTtcclxuICAgICAgICAgICAgICAgIHRhYmxlUm93LmFwcGVuZENoaWxkKHRhYmxlQ2VsbCk7XHJcbiAgICAgICAgICAgICAgICBub2RlQ29vcmQucHVzaChyb3dDb29yZCk7XHJcbiAgICAgICAgICAgICAgICBub2RlQ29vcmQucHVzaChjb2x1bW5Db29yZCk7XHJcbiAgICAgICAgICAgICAgICB0YWJsZUNlbGwuZGF0YXNldC5jb29yZEFycmF5ID0gbm9kZUNvb3JkO1xyXG4gICAgICAgICAgICAgICAgbm9kZUNvb3JkLnNwbGljZSgwLDIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNoZXNzVGFibGUuYXBwZW5kQ2hpbGQodGFibGVSb3cpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY2VsbE5vZGVzID0gY2hlc3NUYWJsZS5xdWVyeVNlbGVjdG9yQWxsKFwidGRcIik7XHJcbiAgICBcclxuICAgIGNlbGxOb2Rlcy5mb3JFYWNoKChjZWxsTm9kZSk9PntcclxuICAgICAgICBpZiAoc3RhcnRDb29yZHMudG9TdHJpbmcoKSA9PT0gY2VsbE5vZGUuZGF0YXNldC5jb29yZEFycmF5KSB7XHJcbiAgICAgICAgICAgIGxldCBrbmlnaHRJbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgICAgICAgICBrbmlnaHRJbWcuc3JjID0gXCJodHRwczovL2V4dGVybmFsLWNvbnRlbnQuZHVja2R1Y2tnby5jb20vaXUvP3U9aHR0cCUzQSUyRiUyRmNsaXBhcnQtbGlicmFyeS5jb20lMkZpbWclMkY5NjI0NjcucG5nJmY9MSZub2ZiPTEmaXB0PTg3YTQxYTgzZWU2MDc3NmM5YzczODY1OGZjZjUwNjFiMzc1MzcyNTgyZTYxMWZlNGU1MjdlYjg5MzhiNGFjMmQmaXBvPWltYWdlc1wiO1xyXG4gICAgICAgICAgICBjZWxsTm9kZS5hcHBlbmRDaGlsZChrbmlnaHRJbWcpO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2hlc3NUYWJsZSk7XHJcbn1cclxuZXhwb3J0IHtnYW1lQm9hcmR9OyIsImltcG9ydCBcIi4vc3R5bGVzLmNzc1wiXHJcbmltcG9ydCB7IGdhbWVCb2FyZCB9IGZyb20gXCIuL2dhbWVib2FyZFwiO1xyXG5pbXBvcnQgeyBrbmlnaHRzVHJhdmFpbHMgfSBmcm9tIFwiLi9rbmlnaHRNb3Zlc1wiO1xyXG5pbXBvcnQgeyBnZXRQYXRoIH0gZnJvbSBcIi4vZ2V0UGF0aFwiO1xyXG5jb25zdCBhcHBDb250cm9sbGVyID0gKGZ1bmN0aW9uKCl7XHJcbiAgICBnYW1lQm9hcmQoKTtcclxuICAgIGdldFBhdGgoKTtcclxufSkgKCk7XHJcblxyXG5cclxuIiwiaW1wb3J0IHsga25pZ2h0c1RyYXZhaWxzIH0gZnJvbSBcIi4va25pZ2h0TW92ZXNcIjtcclxuY29uc3QgZ2V0UGF0aCA9ICgpID0+e1xyXG4gICAgY29uc3QgdHJhdmVsU3F1YXJlcyA9IFtdXHJcbiAgICBjb25zdCBjaGVzc1RhYmxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignVGFibGUnKVxyXG4gICAgY29uc3Qgc3F1YXJlcyA9IGNoZXNzVGFibGUucXVlcnlTZWxlY3RvckFsbChcInRkXCIpXHJcbiAgICBzcXVhcmVzLmZvckVhY2goKHNxdWFyZSk9PntcclxuICAgICAgICBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uKHNxdWFyZSl7XHJcbiAgICAgICAgICAgIHRyYXZlbFNxdWFyZXMucHVzaChzcXVhcmUuZGF0YXNldC5jb29yZEFycmF5KVxyXG4gICAgICAgIH0pIFxyXG4gICAgfSlcclxuXHJcbiAgICB3aGlsZSh0cmF2ZWxTcXVhcmVzLmxlbmd0aD4xKXtcclxuICAgICAgICBzcXVhcmVzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbihzcXVhcmUpe1xyXG4gICAgICAgICAgICBnZXRDb29yZHMoc3F1YXJlKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAga25pZ2h0c1RyYXZhaWxzKHRyYXZlbFNxdWFyZXNbMF0sdHJhdmVsU3F1YXJlc1sxXSlcclxuICAgICAgICB0cmF2ZWxTcXVhcmVzLmxlbmd0aCA9IDA7XHJcbiAgICB9XHJcblxyXG59XHJcbmV4cG9ydCB7Z2V0UGF0aH0iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwic3F1YXJlUmVnaXN0cnkiLCJNYXAiLCJjaGVzc1NxdWFyZSIsIngiLCJ5IiwieFBvc2l0aW9uIiwieVBvc2l0aW9uIiwicHJlZGVjZXNzb3IiLCJLTklHSFRfTU9WRVMiLCJnZXRQcmVkZWNlc3NvciIsInNldFByZWRlY2Vzc29yIiwibmV3UHJlZGVjZXNzb3IiLCJuYW1lIiwicG9zc2libGVLbmlnaHRNb3ZlcyIsIm9mZnNldCIsIm5ld1NxdWFyZUZyb20iLCJmaWx0ZXIiLCJzcXVhcmUiLCJ4T2Zmc2V0IiwieU9mZnNldCIsIm5ld1giLCJuZXdZIiwiaGFzIiwibmV3U3F1YXJlIiwic2V0Iiwia25pZ2h0c1RyYXZhaWxzIiwic3RhcnQiLCJmaW5pc2giLCJjbGVhciIsIm9yaWdpbiIsInF1ZXVlIiwiaW5jbHVkZXMiLCJjdXJyZW50U3F1YXJlIiwic2hpZnQiLCJlbnF1ZXVlTGlzdCIsImZvckVhY2giLCJwYXRoIiwicHJldlNxdWFyZSIsInVuc2hpZnQiLCJjb25zb2xlIiwibG9nIiwic3F1YXJlQ29vcmQiLCJzdGFydENvb3JkcyIsIm5vZGVDb29yZCIsImNoZXNzVGFibGUiLCJ0YWJsZVJvdyIsInJvd0Nvb3JkIiwiTWF0aCIsImFicyIsInRleHRDb250ZW50IiwieiIsInRhYmxlQ2VsbCIsImNvbHVtbkNvb3JkIiwiZGF0YXNldCIsImNvb3JkQXJyYXkiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2VsbE5vZGUiLCJrbmlnaHRJbWciLCJzcmMiLCJib2R5IiwiZ2FtZUJvYXJkIiwidHJhdmVsU3F1YXJlcyIsInNxdWFyZXMiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImdldENvb3JkcyIsImdldFBhdGgiXSwic291cmNlUm9vdCI6IiJ9