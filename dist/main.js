(()=>{"use strict";var e={28:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),o=n.n(r),a=n(645),c=n.n(a)()(o());c.push([e.id,"td{\r\n    height:8vh;\r\n    width: 8vh;\r\n    border:1.5px solid gray;\r\n    border-style: inset;\r\n}\r\nh1{\r\n    color:black;\r\n    text-align: center;\r\n}\r\n.whiteCell{\r\n    background-color: white;\r\n}\r\n.blackCell{\r\n    background-color: black;\r\n    color:white;\r\n}\r\nimg{\r\n    height:6vh;\r\n    width: 6vh;\r\n}\r\ntable{\r\n    text-align: center;\r\n    font-size: x-large;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n}\r\nbutton{\r\n    margin: 15px;\r\n}\r\nbody{\r\n    text-align: center;\r\n    background-color: brown;\r\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,UAAU;IACV,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,WAAW;IACX,kBAAkB;AACtB;AACA;IACI,uBAAuB;AAC3B;AACA;IACI,uBAAuB;IACvB,WAAW;AACf;AACA;IACI,UAAU;IACV,UAAU;AACd;AACA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,iBAAiB;IACjB,kBAAkB;AACtB;AACA;IACI,YAAY;AAChB;AACA;IACI,kBAAkB;IAClB,uBAAuB;AAC3B",sourcesContent:["td{\r\n    height:8vh;\r\n    width: 8vh;\r\n    border:1.5px solid gray;\r\n    border-style: inset;\r\n}\r\nh1{\r\n    color:black;\r\n    text-align: center;\r\n}\r\n.whiteCell{\r\n    background-color: white;\r\n}\r\n.blackCell{\r\n    background-color: black;\r\n    color:white;\r\n}\r\nimg{\r\n    height:6vh;\r\n    width: 6vh;\r\n}\r\ntable{\r\n    text-align: center;\r\n    font-size: x-large;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n}\r\nbutton{\r\n    margin: 15px;\r\n}\r\nbody{\r\n    text-align: center;\r\n    background-color: brown;\r\n}"],sourceRoot:""}]);const i=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(c[s]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&c[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},c=[],i=0;i<e.length;i++){var s=e[i],l=r.base?s[0]+r.base:s[0],u=a[l]||0,d="".concat(l," ").concat(u);a[l]=u+1;var p=n(d),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var f=o(A,r);r.byIndex=i,t.splice(i,0,{identifier:d,updater:f,references:1})}c.push(d)}return c}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=n(a[c]);t[i].references--}for(var s=r(e,o),l=0;l<a.length;l++){var u=n(a[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),a=n(569),c=n.n(a),i=n(565),s=n.n(i),l=n(216),u=n.n(l),d=n(589),p=n.n(d),A=n(28),f={};f.styleTagTransform=p(),f.setAttributes=s(),f.insert=c().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=u(),t()(A.Z,f),A.Z&&A.Z.locals&&A.Z.locals;const h=new Map,m=(e,t)=>{const n=e,r=t;let o;const a=[[1,2],[1,-2],[2,1],[2,-1],[-1,2],[-1,-2],[-2,1],[-2,-1]],c=()=>o,i=e=>{o=o||e},s=()=>`${e},${t}`,l=()=>a.map((e=>u(e[0],e[1]))).filter((e=>void 0!==e)),u=(e,o)=>{const[a,c]=[n+e,r+o];if(0<=a&&a<8&&0<=c&&t<8)return m(a,c)};if(h.has(s()))return h.get(s());{const e={name:s,getPredecessor:c,setPredecessor:i,possibleKnightMoves:l};return h.set(s(),e),e}};(()=>{const e=[],t=document.createElement("table");t.setAttribute("class","center");for(let n=0;n<8;n++){const r=document.createElement("tr");let o=Math.abs(n-7);r.textContent=o;for(let t=0;t<8;t++){let a=document.createElement("td"),c=t;(n+t)%2==0&&(a.setAttribute("class","whiteCell"),r.appendChild(a),e.push(o),e.push(c),a.dataset.coordArray=e,e.splice(0,2)),(n+t)%2==1&&(a.setAttribute("class","blackCell"),r.appendChild(a),e.push(o),e.push(c),a.dataset.coordArray=e,e.splice(0,2))}t.appendChild(r)}document.body.appendChild(t)})(),(()=>{const e=[];function t(){e.push(this.dataset.coordArray)}document.querySelectorAll("td").forEach((n=>{n.addEventListener("click",t),n.addEventListener("click",(function(){if(2==e.length){let t=e[1].split(",").map(Number);(e=>{const t=document.querySelectorAll("td");for(let n=0;n<e.length;n++)t.forEach((t=>{if(e[n]===t.dataset.coordArray){t.textContent=n;let e=document.createElement("img");e.src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fcdn.emojidex.com%2Femoji%2Fseal%2Fwhite_chess_knight.png%3F1422536464&f=1&nofb=1&ipt=c83c791abc87f21ece8ecd49a3fc2eba12864c2ffd18493b5afbdde07ba1f489&ipo=images",t.appendChild(e),console.log("hi")}}))})(((e,t)=>{h.clear();const n=m(e[0],e[1]),r=m(t[0],t[1]),o=[n];for(;!o.includes(r);){const e=o.shift(),t=e.possibleKnightMoves();t.forEach((t=>t.setPredecessor(e))),o.push(...t)}const a=[r];for(;!a.includes(n);){const e=a[0].getPredecessor();a.unshift(e)}let c=[];return a.forEach((e=>{c.push(e.name())})),c})(e[0].split(",").map(Number),t))}}))}))})(),document.querySelector(".clear-board-button").addEventListener("click",(function(){window.location.reload()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,